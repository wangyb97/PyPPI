Feature generation examples
=======================================

This page shows how to generate four types of features using the ``PyPPI.Features`` module.

Importing related modules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: py

    from PyPPI.Features import generateBIOFeatures, generatePhysChemFeatures, getStructuralFeatures, generateLanguageModelFeatures

Generating biological features for seq_72.fasta dataset
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The first dimension of the matrix generated by these features is ``the number of amino acids``. The second dimension is ``the selected windowSize``, and when six features are selected at the same time, the third dimension of ``25`` feature vectors can be generated for the sequence.

.. code-block:: py

    bioFeature=generateBIOFeatures(ECO=True, HSP=True, scoringMatrix=3, RAA=True, Pro2Vec_1D=True, PSSM=True, Anchor=True, windowSize=1)
    print(type(biological_features))
    print('bioFeature:',bioFeature.shape)

output:
    ::

        <class 'numpy.ndarray'>
        (18140, 1, 25)

Generating physical and chemical features for seq_72.fasta dataset
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The first dimension of the matrix generated by these features is ``the number of amino acids``. The second dimension is ``the selected windowSize``, and when four features are selected at the same time, the third dimension of ``12`` feature vectors can be generated for the sequence.

.. code-block:: py

    PhysChemFeatures=generatePhysChemFeatures(HYD=True, PHY_Prop=True, PKA=True, PHY_Char=True, windowSize=1)
    print(type(PhysChemFeatures))
    print('PhysChemFeatures:',PhysChemFeatures.shape)

output:
    ::

        <class 'numpy.ndarray'>
        (18140, 1, 12)

Generating structural features for seq_72.fasta dataset
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the dssp algorithm
--------------------------

Using the dssp algorithm, the first shape dimension is ``the number of amino acids``, and the second dimension is ``14``.

.. code-block:: py

    structuralFeatures=generateStructuralFeatures(dssp=True)
    print(type(structuralFeatures))
    print('structuralFeatures:',structuralFeatures.shape)

output:
    ::

        <class 'numpy.ndarray'>
        (83, 14)

Use the RSA algorithm
--------------------------

The first dimension of the matrix generated by these features is ``the number of amino acids``. The second dimension is ``the selected windowSize``, and when four features are selected at the same time, the third dimension of ``1`` feature vectors can be generated for the sequence.

.. code-block:: py

    structuralFeatures=generateStructuralFeatures(RSA=True, windowSize=1)
    print(type(structuralFeatures))
    print('structuralFeatures:',structuralFeatures.shape)

output:
    ::

        <class 'numpy.ndarray'>
        (18140, 1, 1)

Generating language model features for seq_72.fasta dataset
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ProtT5 algorithm
--------------------------

The first dimension of the matrix generated by these features is ``1``. The second dimension is ``the number of amino acids``, and when four features are selected at the same time, the third dimension of ``1024`` feature vectors can be generated for the sequence.

.. code-block:: py

    dynamicFeatures = generateLanguageModelFeatures(model='ProtT5')
    print(type(dynamicFeatures))
    print('dynamicFeatures:',dynamicFeatures.shape)
    
output:
    ::

        <class 'numpy.ndarray'>
        (1, 18140, 1024)

Use the ESM_1b algorithm
--------------------------

The first dimension of the matrix generated by these features is ``the number of amino acids``. The second dimension is ``3``, and when four features are selected at the same time, the third dimension of ``33`` feature vectors can be generated for the sequence.

.. code-block:: py

    dynamicFeatures = generateLanguageModelFeatures(model='ESM_1b')
    print(type(dynamicFeatures))
    print('dynamicFeatures:',dynamicFeatures.shape)

output:
    ::

        <class 'numpy.ndarray'>
        (18140, 3, 33)

Use the ProGen2 algorithm
----------------------------

Using the ProGen2 algorithm, the first shape dimension is ``the number of amino acids``, and the second dimension is ``32``.

.. code-block:: py

    dynamicFeatures = generateLanguageModelFeatures(model='ProGen2')
    print(type(dynamicFeatures))
    print('dynamicFeatures:',dynamicFeatures.shape)

output:
    ::

        <class 'numpy.ndarray'>
        (18140, 32)